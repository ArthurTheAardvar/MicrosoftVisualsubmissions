import pygame

pygame.init()
pygame.display.set_caption("Space Invaders")
gamescreen = pygame.display.set_mode ((800, 800))
tick = pygame.time.Clock()
timer = 0;
Bye = False
xpos = 400
ypos = 750
vx = 5
moveLeft = False
moveRight = False
shoot = False
numHits = 0

class Wall:#---------------------------------------------------------------------
    def __init__(self, xpos, ypos):
        self.xpos = xpos
        self.ypos = ypos
        self.isAlive = False

    
    


    
 
    def draw():
        pygame.draw.rect(gamescreen, (200, 200, 0), (self.xpos, self.ypos, 3, 20))




class Bullet:#---------------------------------------------------------------------
    def __init__(self, xpos, ypos):
        self.xpos = xpos
        self.ypos = ypos
        self.isAlive = False

    def move(self, xpos, ypos):
        if self.isAlive == True:
            self.ypos-=5
        if self.ypos < 0:
            self.isAlive = False
            self.xpos = xpos
            self.ypos = ypos
    

    
    
 
    def draw(self):
        pygame.draw.rect(gamescreen, (250, 250, 250), (self.xpos, self.ypos, 3, 20))



bullet = Bullet(xpos+28, ypos)


class Alien:#---------------------------------------------------------------------------------------------------
    def __init__(self, xpos, ypos):
        self.xpos = xpos
        self.ypos = ypos
        self.isAlive = True
        self.direction = 1

    def draw(self):
        if self.isAlive:
            pygame.draw.rect(gamescreen, (250, 250, 250), (self.xpos, self.ypos, 40, 40))

    def move(self, timer):

        #moving down
        if timer % 200 == 0:
            self.ypos += 50
            self.direction *=-1
            return 0


        #moving right
        if timer%100==0:
            self.xpos +=50*self.direction
            #print("moving right")

       
            

        return timer

    def collide(self, BulletX, BulletY):

        if self.isAlive:
            if BulletX > self.xpos:
                if BulletX < self.xpos+40:
                    if BulletY < self.ypos +40:
                        if BulletY >self.ypos:
                            print("hit!")
                            self.isAlive = False
                            return False
        return True

armada = []
for i in range (4):
    for j in range(9):
        armada.append(Alien(j*80+65, i*80+50))

walls = []
for k in range (4):
    for i in range (2):
        for j in range (3):
            walls.append(Wall(j*30+200*k+50, i*30+600))


while not Bye: #gameloop #################################
    tick.tick(60)
    timer+=1

    #Input Section--------------------------------------------
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            Bye = True

        if event.type == pygame.KEYDOWN:#--------------------------
            if event.key == pygame.K_LEFT:
                moveLeft = True
                
            if event.key == pygame.K_RIGHT:
                moveRight = True

            if event.key == pygame.K_SPACE:
                shoot = True
    
        elif event.type == pygame.KEYUP:#-----------------------------
            if event.key == pygame.K_LEFT:
                moveLeft = False

     
            if event.key == pygame.K_RIGHT:
                moveRight = False

            if event.key == pygame.K_SPACE:
                shoot = False
    
        
            


    #physics section--------------------------------------------

    if moveLeft == True:
        vx =- 3
    
    elif moveRight == True:
        vx =+ 3
    else:
        vx = 0

    xpos += vx

    if shoot == True:
        bullet.isAlive = True

    if bullet.isAlive == True:
        bullet.move(xpos+28, ypos)

        for i in range (len(armada)):
            bullet.isAlive = armada[i].collide(bullet.xpos, bullet.ypos)
            if bullet.isAlive == False:
                break

    else:

       bullet.xpos = xpos +28
       bullet.ypos = ypos




    #render section--------------------------------------------


    gamescreen.fill ((0,0,0))
    bullet.draw()


    pygame.draw.rect(gamescreen, (0, 200, 0), (xpos, 750, 60, 20))
    pygame.draw.rect(gamescreen, (0, 200, 0), (xpos+5, 745, 50, 20))
    pygame.draw.rect(gamescreen, (0, 200, 0), (xpos+25, 735, 11, 10))
    pygame.draw.rect(gamescreen, (0, 200, 0), (xpos+28, 730, 5, 10))
    #pygame.draw.rect(gamescreen, (200, 200, 0), (570, 610, 80, 50))
    #pygame.draw.rect(gamescreen, (200, 200, 0), (420, 610, 80, 50))
    #pygame.draw.rect(gamescreen, (200, 200, 0), (270, 610, 80, 50))
    #pygame.draw.rect(gamescreen, (200, 200, 0), (120, 610, 80, 50))
    
    walls = []
    for k in range (4):
        for i in range (2):
            for j in range (3):
                walls.append(Wall(j*30+200*k+50, i*30+600))
    

    for i in range (len(armada)):
        armada[i].draw()

    for i in range (len(armada)):
        timer = armada[i].move(timer)
    
    
    

    
    
    pygame.display.flip()
#end game loop###################################

pygame.quit()
